'''Комментарии для кода излишне т.к. задачка вполне простая и повторяет код из модулей.
Решение для базового задания. Код с использованием декоратора как объекта класса реализован в другом файле. '''
import time

#пользовательский ввод кол-ва запусков
num_runs = int(input("Введите количество запусков для усреднения времени "))

def time_this(num_runs):
	#Создаем обертку
	def decorator(func):
		def wrapper():
			#принты для наглядности выполнения кода в терминале
			print("Старт выполнения программы")
			#объявляем и инициализируем переменную, которая будет хранить среднее время
			avg_time = 0
			for i in range(num_runs):
				print("Запуск функции № ", i+1)
				#начальное время
				t0 = time.time()
				func()
				#время в момент когда измеряемая функция выполнена
				t1 = time.time()
				print("Конец запуска функции № ", i+1)
				print("Время выполнения запуска функции №", i+1, " = %.5f секунд" % (t1 - t0))
				#увеличиваем переменную avg_time на время выполнения очередной итерации
				avg_time += (t1 - t0)
			#находим значение среднего времени
			avg_time /= num_runs
			return "Cреднее время выполнения функции %.5f секунд" % avg_time
		return wrapper
	return decorator



@time_this(num_runs)
def f():
	print("Выполнение функции")
	for i in range(1000000):
		pass

print(f())
